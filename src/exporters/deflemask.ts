import { APP_TITLE } from '@/constants'
import { midiNoteNumberToName } from '@/utils'
import { BaseExporter, type ExporterParams } from '@/exporters/base'
import { frequencyToCentOffset, ftom } from 'xen-dev-utils'

// This exporter converts your tuning data into a readable format you can easily input manually into Deflemask.
// For example if you have a note 50 cents below A4, you would input that into Deflemask as A-4 -- - E5 40
// Deflemask manual: http://www.deflemask.com/manual.pdf
export default class DeflemaskExporter extends BaseExporter {
  // acceptable range is C#0 to B7 (MIDI notes 1-95)
  static minNote = 1
  static maxNote = 95

  appTitle: string

  constructor(params: ExporterParams) {
    super(params)
    this.appTitle = params.appTitle || APP_TITLE
  }

  // assemble the text file contents
  getFileContents(searchLowerBound = -256, searchUpperBound = 256) {
    const newline = this.params.newline

    let file =
      this.params.description +
      newline +
      'Reference for Deflemask note input - generated by ' +
      this.appTitle +
      newline +
      newline
    file += this.params.scaleUrl + newline + newline

    for (let i = searchLowerBound; i <= searchUpperBound; i++) {
      const frequency = this.params.scale.getFrequency(i)
      // convert frequency into midi note number + cents offset
      const [noteNumber, cents] = ftom(frequency)

      // acceptable range is C#0 to B7 (MIDI notes 1-95). skip this note if it's out of range
      if (noteNumber < DeflemaskExporter.minNote || noteNumber > DeflemaskExporter.maxNote) continue

      // convert note number to note name
      let name = midiNoteNumberToName(noteNumber, this.params.midiOctaveOffset)
      name = name.length == 2 ? name.slice(0, 1) + '-' + name.slice(1) : name

      // convert cents offset to hex where -100c=00, 0c=80, 100c=FF
      const centsHex = Math.round(128 + cents * 1.28)
        .toString(16)
        .toUpperCase()

      // add data to text file
      const data = '[' + name + ' xx] [xx E5 ' + centsHex + ']'
      file +=
        data +
        ' ..... ' +
        i +
        ': ' +
        frequency.toFixed(2) +
        ' Hz / ' +
        frequencyToCentOffset(frequency).toFixed(2) +
        ' cents' +
        newline
    }

    return file
  }

  saveFile() {
    super.saveFile(this.params.filename + '.txt', this.getFileContents())
  }
}
